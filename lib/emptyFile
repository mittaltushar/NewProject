/*Padding(padding: EdgeInsets.only(top: 100),
                                          child: Center(
                                              child: Text(snapshot.data?.payload.latestQuiz[index].name as String,  textAlign: TextAlign.center,style:
                                              TextStyle(color: Colors.white,
                                                fontSize: 15.0,
                                                fontWeight: FontWeight.bold,),

                                              )
                                          )
                                        )/*),),);},);},)

                      /*Container(
                  height: 160,
                  margin: EdgeInsets.only(top: 10),
                  child: ListView(
    child: FutureBuilder<HomePageData>(
    future: fetchHomeData(),
    builder: (context, snapshot) {
    //if (snapshot.data) {
    return

    ListView.builder(

    scrollDirection: Axis.horizontal,
    itemCount: snapshot.data?.payload.banners.length,
    itemBuilder: (context, index) {

    return

    Container(
    height: 350,
    width: 400,
    decoration: BoxDecoration(
    color: Colors.white,
    borderRadius: BorderRadius.circular(8.0),
    image: DecorationImage(

    image: NetworkImage(snapshot.data?.payload.banners![index].imageUrl as String),

    fit: BoxFit.cover,
    ),),);}
*/
                      /*child: ListView(scrollDirection: Axis.horizontal,

                    children:  <Widget> [
                      Padding(padding: EdgeInsets.only(right: 15, left: 10),child:
                      Container(
                        width: 110,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8.0),
                          image: DecorationImage(
                            image: NetworkImage("https://ramapuzzle.s3.ap-south-1.amazonaws.com/GK-Current-Quiz.png"),
                            fit: BoxFit.cover,
                          ),
                        ),
                        child: Column(
                          children: <Widget>[
                            Padding(padding: EdgeInsets.only(top: 100),
                              child: Text(
                                "GK and current affairs Quiz",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 15.0,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),)
                          ],
                        ),

                        height: 150,
                      ),),

                      Padding(padding: EdgeInsets.only(right: 10),child:
                      Container(
                        width: 110,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8.0),
                          image: DecorationImage(
                            image: NetworkImage("https://ramapuzzle.s3.ap-south-1.amazonaws.com/Paheli-Quiz.png"),
                            fit: BoxFit.cover,
                          ),
                        ),
                        child: Column(
                          children: <Widget>[
                            Padding(padding: EdgeInsets.only(top: 100),
                              child: Text(
                                "Paheli \n quiz",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 15.0,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),)
                          ],
                        ),

                        height: 150,
                      ),),
                      Padding(padding: EdgeInsets.only(right: 10, left : 5),child:
                      Container(
                        width: 110,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8.0),
                          image: DecorationImage(
                            image: NetworkImage("https://ramapuzzle.s3.ap-south-1.amazonaws.com/YouTube-Quiz.png"),
                            fit: BoxFit.cover,
                          ),
                        ),
                        child: Column(
                          children: <Widget>[
                            Padding(padding: EdgeInsets.only(top: 100),
                              child: Text(
                                "Youtube \n Quiz",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 15.0,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),)
                          ],
                        ),

                        height: 150,
                      ),),
                      Padding(padding: EdgeInsets.only(right: 10, left: 5),child:
                      Container(
                        width: 100,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8.0),
                          image: DecorationImage(
                            image: NetworkImage("https://ramapuzzle.s3.ap-south-1.amazonaws.com/Regional-Paheli-Quiz.jpg"),
                            fit: BoxFit.cover,
                          ),
                        ),
                        child: Column(
                          children: <Widget>[
                            Padding(padding: EdgeInsets.only(top: 100),
                              child: Text(
                                "Regional Paheli Quiz",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 15.0,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),)
                          ],
                        ),

                        height: 150,
                      ),),
                      Padding(padding: EdgeInsets.only(right: 10, left: 5),child:
                      Container(
                        width: 100,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: Bordcular(8.0),
                          image: DecorationImage(
                            image: NetworkImage("https://ramapuzzle.s3.ap-south-1.amazonaws.com/Plant-Tree.jpg"),
                            fit: BoxFit.cover,
                          ),
                        ),
                        child: Column(
                          children: <Widget>[
                            Padding(padding: EdgeInsets.only(top: 100),
                              child: Text(
                                "Plant a Tree",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 15.0,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),)
                          ],
                        ),

                        height: 150,
                      ),),

                    ],
                  ),*/
                    ),
/*
                    Container(
                      height: 35.h,
                      *//*padding: EdgeInsets.only(top: 5),*//*
                      //margin: EdgeInsets.only(top: 40),
                      child: FutureBuilder<HomePageData>(
                        future: homePageData,
                        builder: (context, snapshot) {
                          //if (snapshot.data) {
                          return

                            GridView.builder(
                              physics: NeverScrollableScrollPhysics(),
                              padding: EdgeInsets.only(top: 0,bottom: 0),
                              gridDelegate:
                              SliverGridDelegateWithFixedCrossAxisCount(

                                *//*mainAxisSpacing: ,*//* *//*maxCrossAxisExtent: 200,*//*
                                childAspectRatio: 1.65,
                                crossAxisSpacing: 0, crossAxisCount: 2,



                              ),

                              itemCount: snapshot.data?.payload.recentQuiz.length,
                              shrinkWrap: true,
                              itemBuilder: (context, index) {

                                int? id = snapshot.data?.payload.recentQuiz[index].id;
                                String? str = snapshot.data?.payload.recentQuiz[index].name;
                                return

                                  //
                                  //                             Text("${snapshot.data?.payload.tranding[index].name}")

                                  InkWell(onTap: () async {

                                    // var chk = await getLoginStatus();
                                    if (( loginStatus == true))
                                      Navigator.push(
                                          context,
                                          MaterialPageRoute(builder: (context) =>
                                              StudyMaterialSubCategory(category_id: id!, category_name: str)));
                                    //QuizSubCategory(category_id: id!,category_name: str!,)));
                                    else {
                                      showDialog1();
                                    }

                                  },child:
                                  Container(

                                    height: 100,
                                    child:
                                    AspectRatio(aspectRatio: 16 / 13,
                                      child: getItem2(snapshot.data?.payload.recentQuiz[index] as LatestQuiz, index)
                                      ,),),);},);},),)*/
                    /*Visibility(
                      visible: loginStatus != true? false: true,
                        child: Column(children: [


                          Container(
                              margin: EdgeInsets.only( top: 10),
                              child : Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Container(
                                    margin: EdgeInsets.only(left:10.0),
                                    child:

                                    Text('Recent Quiz' ,style:
                                    TextStyle( fontFamily: 'Poppins',
                                        fontSize: 17, fontWeight:  FontWeight.w800)

                                    )
                                    *//*GoogleFonts.poppins(
                                    fontSize: 17, fontWeight: FontWeight.w800
                                )*//* ,),
                                  Container(
                                    margin: EdgeInsets.only(right:10.0),
                                    child:
                                    Text('See all' ,textAlign: TextAlign.right,style:*//* GoogleFonts.poppins(
                                    fontSize: 14, fontWeight: FontWeight.w400,color: ColorConstants.backgroundColor
                                )*//*
                                    TextStyle( fontFamily: 'Poppins',
                                        fontSize: 14, fontWeight:  FontWeight.w400,color: ColorConstants.backgroundColor)
                                      ,),),

                                ],
                              )
                          ),


                          Container(

                            margin: EdgeInsets.symmetric(horizontal: 5,
                                vertical: 5),

                            height: 90,
                            decoration:BoxDecoration
                              (
                                image: DecorationImage(
                                  image: AssetImage('assets/images/latest_quiz.png'),
                                  fit: BoxFit.cover,
                                ),

                                color: Colors.blueGrey,
                                borderRadius: BorderRadius.only
                                  (
                                  bottomLeft: Radius.circular(10),
                                  bottomRight: Radius.circular(10),
                                  topLeft: Radius.circular(10),
                                  topRight: Radius.circular(10),
                                )

                            ),

                          )
                        ],))*/



                  ],
                ),


                onTap: () async {
                  //if (isLogin1 == false)
                  /*final prefs = await SharedPreferences.getInstance();

// set value
                  *//*await prefs.setInt('user_id', data.payload.id);
    await prefs.setString('auth-token', data.payload.authToken);*//*
                  // bool? loginBit = await prefs.getBool('isLogin');
                  bool? CheckValue = await prefs.getBool('isLogin');
                  print(CheckValue);
                  if (CheckValue == null)*/
                  if (loginStatus == false)
                    showDialog(context: context, builder: (context){
                      return Container(
                        child: AlertDialog(
                          title: Center(child:
                          Text('Please Login' ,/*textAlign: TextAlign.right,*/style: /*GoogleFonts.poppins(
                        fontSize: 20, fontWeight: FontWeight.w600,color: Colors.black
                    ) */TextStyle(color: Colors.black, fontFamily: 'Poppins',
                              fontSize: 20, fontWeight:  FontWeight.w600)

                          ),
                          ),
                          actionsPadding: EdgeInsets.fromLTRB(20, 0, 20, 20),
                          actions: [

                            TextButton(onPressed:(){

                              Navigator.pop(context);
                              // runLoginApi
                              //fetchAlbum();
                              //Navigator.pop(context);
                              //Navigator.of(context).push(MaterialPageRoute(builder: (context)=> MyStatefulWidget()));
                            }, child:Container(
                              height: 50,
                              width: 100,
                              decoration: BoxDecoration(
                                color: ColorConstants.bluishColor,
                                borderRadius: BorderRadius.circular(10),
                              ),
                              child: Padding(
                                padding: EdgeInsets.only(top: 0),
                                child: Center(child:Text("Cancel",style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.black,
                                ),),
                                ),),
                            ),
                            ),
                            TextButton(onPressed:(){

                              Navigator.of(context, rootNavigator: true).pop();
                              Navigator.of(context).push(MaterialPageRoute(builder: (context)=>MyStatefulWidget(updateValue: _updateValue,))).then((value) => loginStatus = value);
                            }, child:Container(
                              height: 50,
                              width: 100,
                              decoration: BoxDecoration(
                                color: Colors.yellow,
                                borderRadius: BorderRadius.circular(10),
                              ),
                              child: Padding(
                                padding: EdgeInsets.only(left: 0,top: 0),
                                child: Center(child:Text("Ok",style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.black),),),
                              ),
                            ), ),
                          ],

                        ),
                      );
                    },);
                },
              ),
            ),),
         ` bottomNavigationBar: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.only(
                  topRight: Radius.circular(30), topLeft: Radius.circular(30)),
              boxShadow: [
                BoxShadow(color: Colors.black38, spreadRadius: 0, blurRadius: 10),
              ],

            ),
            child: ClipRRect(
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(30.0),
                topRight: Radius.circular(30.0),
              ),
              child: BottomNavigationBar(
                onTap: (value)  {
                  if (value == 4) {
                    openProfile();
                    //if (isLogin1 == true)
                    /*final prefs = await SharedPreferences.getInstance();

// set value
          *//*await prefs.setInt('user_id', data.payload.id);
    await prefs.setString('auth-token', data.payload.authToken);*//*
          // bool? loginBit = await prefs.getBool('isLogin');
          bool? CheckValue = await prefs.getBool('isLogin');
          if (CheckValue == null)
          Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => Profile(payload3: payload2!)));*/
                  }
                  if (value == 2) {
                    openRewards();
                    /*final prefs = await SharedPreferences.getInstance();

// set value
          *//*await prefs.setInt('user_id', data.payload.id);
    await prefs.setString('auth-token', data.payload.authToken);*//*
          // bool? loginBit = await prefs.getBool('isLogin');
          bool? CheckValue = await prefs.getBool('isLogin');
          if (CheckValue == null)
          Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => RewardDisplay(
          )));*/
                  }
                  /*if (value == 3) {
          if (isLogin1 == true)
            Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => QuizChapter()));
        }*/
                },
                backgroundColor: ColorConstants.backgroundColor, // <-- This works for fixed
                selectedItemColor: Colors.white,
                type: BottomNavigationBarType.fixed,
                unselectedItemColor: Colors.white,
                items: <BottomNavigationBarItem>[
                  BottomNavigationBarItem(
                    label: "Home",
                    icon: Icon(Icons.home),

                  ),
                  BottomNavigationBarItem(

                    label: "Chat",
                    icon: Icon(Icons.chat),
                  ),

                  BottomNavigationBarItem(
                    icon: Icon(Icons.monetization_on),
                    label: 'Rewards',
                  ),
                  BottomNavigationBarItem(
                    icon: Icon(Icons.quiz),
                    label: 'Quiz',
                  ),

                  BottomNavigationBarItem(
                    label: "Profile",

                    icon: Icon(Icons.account_circle),
                  ),                  ],


              ),),),),
`

      );
    },);

  }

  updateLoginStatus() {
    loginStatus = true;
  }
  void _updateValue(String newValue) {
    setState(() {
      //_value = newValue;
      if (newValue == "1") {

        //setLoginStatus();
        //getLoginStatus();

      }
    });
    loginStatus = true;
    updateLoginStatus();
    setLoginStatus2();

  }

  setLoginStatus2() async {
    loginStatus = true;
    final prefs = await SharedPreferences.getInstance();
    prefs.setBool("isLogin", true);
// set value
    /*await prefs.setInt('user_id', data.payload.id);
    await prefs.setString('auth-token', data.payload.authToken);*/
    //await prefs.setBool('isLogin', false);

  }

  /*setLoginStatus() {

  }*/
  showDialog1() {
    showDialog(context: context, builder: (context){
      return Container(
        child: AlertDialog(
          title: Center(child:
          Text('Please Login' ,/*textAlign: TextAlign.right,*/style: /*GoogleFonts.poppins(
                        fontSize: 20, fontWeight: FontWeight.w600,color: Colors.black
                    ) */TextStyle(color: Colors.black, fontFamily: 'Poppins',
              fontSize: 20, fontWeight:  FontWeight.w600)

          ),
          ),
          actionsPadding: EdgeInsets.fromLTRB(20, 0, 20, 20),
          actions: [

            TextButton(onPressed:(){

              Navigator.pop(context);
              // runLoginApi
              //fetchAlbum();
              //Navigator.pop(context);
              //Navigator.of(context).push(MaterialPageRoute(builder: (context)=> MyStatefulWidget()));
            }, child:Container(
              height: 50,
              width: 100,
              decoration: BoxDecoration(
                color: ColorConstants.bluishColor,
                borderRadius: BorderRadius.circular(10),
              ),
              child: Padding(
                padding: EdgeInsets.only(top: 0),
                child: Center(child:Text("Cancel",style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.black,
                ),),
                ),),
            ),
            ),
            TextButton(onPressed:(){

              Navigator.of(context, rootNavigator: true).pop();
              Navigator.of(context).push(MaterialPageRoute(builder: (context)=>MyStatefulWidget(updateValue: _updateValue,)));
            }, child:Container(
              height: 50,
              width: 100,
              decoration: BoxDecoration(
                color: Colors.yellow,
                borderRadius: BorderRadius.circular(10),
              ),
              child: Padding(
                padding: EdgeInsets.only(left: 0,top: 0),
                child: Center(child:Text("Ok",style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold,color: Colors.black),),),
              ),
            ), ),
          ],

        ),
      );
    },);
  }

  openProfile() async {
    final prefs = await SharedPreferences.getInstance();

// set value
    /*await prefs.setInt('user_id', data.payload.id);
    await prefs.setString('auth-token', data.payload.authToken);*/
    // bool? loginBit = await prefs.getBool('isLogin');
    //bool? CheckValue = await prefs.getBool('isLogin');
    if (loginStatus == true)
      Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => Profile(payload3: payload2!)));
  }
openRewards() async {
  final prefs = await SharedPreferences.getInstance();

// set value
/*await prefs.setInt('user_id', data.payload.id);
    await prefs.setString('auth-token', data.payload.authToken);*/
// bool? loginBit = await prefs.getBool('isLogin');
  bool? CheckValue = await prefs.getBool('isLogin');
  if (CheckValue == true)
    Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => RewardDisplay(
        )));
}



    getLoginStatus() async {
    final prefs = await SharedPreferences.getInstance();

// set value
    /*await prefs.setInt('user_id', data.payload.id);
    await prefs.setString('auth-token', data.payload.authToken);*/
    bool? loginBit = await prefs.getBool('isLogin');
    if (loginBit == null)
    loginStatus = false;
    else
      loginStatus = loginBit;
  }

  setLoginStatus() async {
    loginStatus = false;
    final prefs = await SharedPreferences.getInstance();
    prefs.setBool("isLogin", false);
// set value
    /*await prefs.setInt('user_id', data.payload.id);
    await prefs.setString('auth-token', data.payload.authToken);*/
    //await prefs.setBool('isLogin', false);

  }
